#BlueJ class context
comment0.target=GUIComponent
comment0.text=\n\ A\ <em>component</em>\ is\ an\ object\ having\ a\ graphical\ representation\n\ that\ can\ be\ displayed\ on\ the\ screen\ and\ that\ can\ interact\ with\ the\n\ user.\n\n\ The\ <code>GUIComponent</code>\ class\ is\ the\ abstract\ superclass\ of\ components\n\ such\ as\ Button,\ Label\ and\ TextField.\ Class\ <code>Component</code>\ can\ be\n\ extended\ directly\ to\ create\ other\ components.\n\n\ @author\ Ed\ Parrish\n\ @version\ 1.1\ \ 7/26/2011\n
comment1.params=
comment1.target=GUIComponent()
comment1.text=\n\ Constructs\ a\ new\ component.\n
comment10.params=
comment10.target=boolean\ isEnabled()
comment10.text=\n\ Determines\ whether\ this\ component\ is\ enabled.\n\n\ An\ enabled\ component\ can\ respond\ to\ user\ input\ and\ generate\ events.\n\ Components\ are\ enabled\ initially\ by\ default.\ A\ component\ may\ be\ enabled\n\ or\ disabled\ by\ calling\ its\ <code>setEnabled()</code>\ method.\n\n\ @return\ Returns\ true\ if\ the\ component\ is\ enabled,\ false\ otherwise.\n
comment11.params=newText
comment11.target=void\ setText(java.lang.String)
comment11.text=\n\ Set\ the\ text\ to\ be\ displayed.\n\n\ @param\ newText\ The\ new\ text\ to\ be\ displayed\ on\ this\ component.\n
comment12.params=
comment12.target=java.lang.String\ getText()
comment12.text=\n\ Returns\ the\ text\ for\ this\ component.\n\n\ @return\ The\ text\ displayed\ on\ this\ component.\n
comment13.params=newFont
comment13.target=void\ setFont(java.awt.Font)
comment13.text=\n\ Set\ the\ font\ to\ use\ for\ writing\ the\ component\ text.\n\n\ @param\ newFont\ The\ font\ used\ to\ write\ on\ this\ component.\n
comment14.params=
comment14.target=java.awt.Font\ getFont()
comment14.text=\n\ Returns\ the\ current\ font\ used\ by\ this\ component,\ or\ null\ if\n\ no\ font\ has\ been\ set.\n\n\ @return\ The\ current\ font\ or\ null\ if\ not\ font\ has\ been\ set.\n
comment15.params=d
comment15.target=void\ setSize(java.awt.Dimension)
comment15.text=\n\ Resizes\ this\ component\ so\ that\ it\ has\ width\ <code>d.width</code>\n\ and\ height\ <code>d.height</code>.\n\n\ @param\ d\ The\ dimension\ specifying\ the\ new\ size.\n
comment16.params=
comment16.target=int\ getHeight()
comment16.text=\n\ Returns\ the\ current\ height\ of\ this\ component.\n\n\ @return\ The\ height\ of\ this\ component.\n
comment17.params=
comment17.target=int\ getWidth()
comment17.text=\n\ Returns\ the\ current\ width\ of\ this\ component.\n\n\ @return\ The\ weight\ of\ this\ component.\n
comment18.params=
comment18.target=boolean\ isFixedSize()
comment18.text=\n\ Determines\ whether\ this\ component\ is\ set\ to\ a\ fixed\ size.\n\n\ By\ default\ a\ component\ will\ determine\ its\ own\ size\ based\ on\ properties\n\ such\ as\ the\ text\ to\ display.\ However,\ the\ component\ can\ be\ set\ to\ a\n\ fixed\ size\ using\ the\ <code>setSize()</code>\ method.\n\n\ @return\ Returns\ <code>true</code>\ if\ the\ component\ is\ a\ fixed\ size;\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise.\n
comment19.params=fg
comment19.target=void\ setForeground(java.awt.Color)
comment19.text=\n\ Set\ the\ foreground\ color\ of\ this\ component,\ such\ as\ its\ text.\n\n\ @param\ fg\ The\ desired\ foreground\ color.\n
comment2.params=str
comment2.target=GUIComponent(java.lang.String)
comment2.text=\n\ Constructs\ a\ new\ component\ with\ the\ specified\ text.\n\n\ The\ component\ will\ not\ display\ until\ <code>repaint()</code>\ is\ called\n\ either\ directly\ or\ indirectly\ through\ calling\ a\ method\ like\n\ <code>setFont()</code>.\n\n\ @param\ str\ The\ text\ to\ display\ on\ the\ component.\n
comment20.params=
comment20.target=java.awt.Color\ getForeground()
comment20.text=\n\ Gets\ the\ foreground\ color\ of\ this\ component.\n\n\ @return\ The\ foreground\ color\ of\ this\ component.\n
comment21.params=bg
comment21.target=void\ setBackground(java.awt.Color)
comment21.text=\n\ Set\ the\ background\ color\ of\ this\ component.\n\n\ @param\ bg\ The\ desired\ background\ color.\n
comment22.params=
comment22.target=java.awt.Color\ getBackground()
comment22.text=\n\ Gets\ the\ background\ color\ of\ this\ component.\n\n\ @return\ The\ background\ color\ of\ this\ component.\n
comment23.params=newBorder
comment23.target=void\ setBorder(Border)
comment23.text=\n\ Sets\ the\ border\ of\ this\ component.\ The\ <code>Border</code>\ object\ is\n\ responsible\ for\ defining\ the\ insets\ for\ the\ component\ and\ for\n\ rendering\ any\ border\ decorations.\n\n\ @param\ newBorder\ The\ border\ to\ be\ rendered\ for\ this\ component\n
comment24.params=
comment24.target=Border\ getBorder()
comment24.text=\n\ Returns\ the\ border\ of\ this\ component\ or\ <code>null</code>\ if\ no\n\ border\ is\ currently\ set.\n\n\ @return\ the\ border\ object\ for\ this\ component\n\ @see\ \#setBorder\n
comment25.params=
comment25.target=java.awt.Insets\ getInsets()
comment25.text=\n\ Gets\ the\ insets\ of\ this\ component,\ which\ indicate\ the\ size\ of\ this\n\ component's\ border.\n\n\ @return\ The\ insets\ of\ this\ component.\n
comment26.params=
comment26.target=java.lang.String\ toString()
comment26.text=\n\ Returns\ a\ string\ representation\ of\ this\ component\ and\ its\ values.\n\n\ @return\ A\ string\ representation\ of\ this\ component.\n
comment27.params=canFocus
comment27.target=void\ setFocusable(boolean)
comment27.text=\n\ Sets\ the\ focusable\ state\ of\ this\ <code>GUIComponent</code>\ to\ the\n\ specified\ value.\ This\ value\ overrides\ the\ component's\ default\n\ focusability.\n\n\ @param\ canFocus\ Determines\ whether\ this\ component\ is\ focusable.\n
comment28.params=
comment28.target=boolean\ isFocusable()
comment28.text=\n\ Returns\ whether\ this\ <code>GUIComponent</code>\ can\ receive\ focus.\n\n\ @return\ <code>true</code>\ if\ this\ <code>GUIComponent</code>\ is\n\ \ \ \ \ \ \ \ \ focusable;\ <code>false</code>\ otherwise.\n
comment29.params=
comment29.target=boolean\ requestFocus()
comment29.text=\n\ Requests\ that\ this\ component\ get\ the\ input\ focus.\n\n\ To\ receive\ focus,\ this\ component\ must\ be\ focusable\ and\ enabled.\n\ Developers\ must\ never\ assume\ that\ this\ component\ is\ the\ focus\ owner\n\ and\ must\ check\ the\ return\ value\ to\ be\ certain.\ If\ this\ method\ returns\n\ true\ then\ focus\ was\ received.\ If\ <code>false</code>\ is\ returned,\n\ the\ request\ failed.\n\n\ @return\ <code>true</code>\ if\ the\ focus\ succeeds\ and\ <code>false</code>\n\ \ \ \ \ \ \ \ \ if\ the\ focus\ fails.\n
comment3.params=str\ f\ fg\ bg
comment3.target=GUIComponent(java.lang.String,\ java.awt.Font,\ java.awt.Color,\ java.awt.Color)
comment3.text=\n\ Constructs\ a\ new\ component\ setting\ the\ specified\ parameters.\n\n\ The\ component\ will\ not\ display\ until\ <code>repaint()</code>\ is\ called\n\ either\ directly\ or\ indirectly\ through\ calling\ a\ method\ like\n\ <code>setFont()</code>.\n\n\ @param\ str\ The\ text\ to\ display\ on\ the\ component.\n\ @param\ f\ The\ font\ to\ use\ when\ displaying\ the\ text.\n\ @param\ fg\ The\ foreground\ color\ to\ use\ when\ displaying\ text.\n\ @param\ bg\ The\ background\ color\ of\ the\ component.\n
comment30.params=
comment30.target=boolean\ isFocusOwner()
comment30.text=\n\ Returns\ <code>true</code>\ if\ this\ component\ is\ the\ focus\ owner.\n\n\ @return\ <code>true</code>\ if\ this\ component\ is\ the\ focus\ owner;\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise\n\ @since\ 1.4\n
comment31.params=al
comment31.target=void\ addActionListener(ActionListener)
comment31.text=\n\ Adds\ a\ class\ implementing\ the\ <code>ActionListener</code>\ interface\ to\n\ the\ notification\ list.\n\n\ @param\ al\ The\ <code>ActionListener</code>\ to\ add\ to\ the\ notification\n\ \ \ \ \ \ \ \ list.\n
comment32.params=
comment32.target=void\ fireActionEvent()
comment32.text=\n\ Notifies\ all\ listeners\ that\ have\ registered\ using\n\ <code>addActionListener()</code>\ for\ notification.\n
comment33.params=al
comment33.target=void\ removeActionListener(ActionListener)
comment33.text=\n\ Removes\ an\ <code>ActionListener</code>\ from\ the\ component.\n\n\ @param\ al\ The\ <code>ActionListener</code>\ to\ remove.\n
comment34.params=w
comment34.target=void\ addedToWorld(greenfoot.World)
comment34.text=\n\ Make\ visible\ when\ added\ to\ world.\n\n\ @param\ w\ the\ world.\n
comment35.params=
comment35.target=void\ repaint()
comment35.text=\n\ Paints\ the\ component\ image,\ including\ the\ background,\ border\ and\ text.\n
comment36.params=
comment36.target=java.awt.Graphics\ getGraphics()
comment36.text=\n\ Gets\ a\ graphics\ context\ for\ this\ component\ from\ this\ Actor's\ image.\n\n\ @return\ a\ graphics\ context\ for\ this\ component.\n
comment37.params=g
comment37.target=void\ paintComponent(java.awt.Graphics)
comment37.text=\n\ Prepares\ the\ components\ background\ image.\n\n\ @param\ g\ \ the\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\n
comment38.params=g
comment38.target=void\ paintBorder(java.awt.Graphics)
comment38.text=\n\ Paints\ the\ component's\ border,\ if\ it\ has\ one.\n\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\n
comment39.params=g
comment39.target=void\ paintText(java.awt.Graphics)
comment39.text=\n\ Paints\ the\ text\ onto\ the\ components\ background\ image.\n\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\n
comment4.params=str\ f\ fg\ bg\ b
comment4.target=GUIComponent(java.lang.String,\ java.awt.Font,\ java.awt.Color,\ java.awt.Color,\ Border)
comment4.text=\n\ Constructs\ a\ new\ component\ setting\ the\ specified\ parameters.\n\n\ The\ component\ will\ not\ display\ until\ <code>repaint()</code>\ is\ called\n\ either\ directly\ or\ indirectly\ through\ calling\ a\ method\ like\n\ <code>setFont()</code>.\n\n\ @param\ str\ The\ text\ to\ display\ on\ the\ component.\n\ @param\ f\ The\ font\ to\ use\ when\ displaying\ the\ text.\n\ @param\ fg\ The\ foreground\ color\ to\ use\ when\ displaying\ text.\n\ @param\ bg\ The\ background\ color\ of\ this\ component.\n\ @param\ b\ The\ border\ to\ be\ rendered\ for\ this\ component.\n
comment40.params=str\ max
comment40.target=java.lang.String[]\ wordWrap(java.lang.String,\ int)
comment40.text=\n\ Wraps\ a\ single\ string\ into\ an\ array\ of\ strings\ for\ some\ maximum\n\ number\ of\ characters.\ Also\ will\ split\ lines\ on\ newlines\ or\ the\n\ characters\ "\\n"\ allowing\ simple\ manually\ placed\ newlines.\n\n\ @param\ str\ The\ text\ to\ word\ wrap.\n\ @param\ max\ The\ maximum\ number\ of\ characters\ per\ line.\n\ @return\ The\ word-wrapped\ lines\ of\ text.\n\n\ @author\ http\://joust.kano.net/weblog/archives/000060.html\n\ @author\ Ed\ Parrish\ (changed\ regex,\ added\ max,\ added\ newline\ split,\n\ removed\ extra\ blank\ line\ at\ end)\n
comment41.params=str\ g
comment41.target=java.awt.Dimension\ getTextDimension(java.lang.String,\ java.awt.Graphics)
comment41.text=\n\ Computes\ the\ dimension\ needed\ to\ display\ text\ in\ the\ specified\n\ <code>Graphics</code>\ context.\n\n\ @param\ str\ The\ text\ to\ display\ on\ this\ component.\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\n\ @return\ the\ dimension\ (width\ and\ height)\ needed.\n
comment42.params=str\ g
comment42.target=java.lang.String[]\ splitLines(java.lang.String,\ java.awt.Graphics)
comment42.text=\n\ Splits\ the\ text\ into\ multiple\ lines\ in\ the\ specified\n\ <code>Graphics</code>\ context.\n\n\ If\ the\ component\ size\ is\ fixed,\ then\ the\ text\ is\ word\ wrapped\ to\ fit.\n\ Otherwise,\ text\ is\ split\ on\ '\\n'\ characters.\n\n\ @param\ str\ The\ text\ to\ display\ on\ this\ component.\n\ @param\ g\ The\ <code>Graphics</code>\ context\ in\ which\ to\ paint.\n\ @return\ the\ split\ lines\ of\ text.\n
comment5.params=
comment5.target=void\ act()
comment5.text=\n\ Default\ behavior\ for\ a\ component\ that\ implements\ the\ focus\ system.\n\n\ Override\ in\ subclasses\ for\ more\ specific\ behavior.\ However,\ call\n\ <code>super.act()</code>\ to\ allow\ focus\ changes.\n
comment6.params=idNumber
comment6.target=void\ setID(int)
comment6.text=\n\ Set\ an\ ID\ number\ for\ this\ component.\n\n\ @param\ idNumber\ An\ identifier\ number.\n
comment7.params=
comment7.target=int\ getID()
comment7.text=\n\ Return\ the\ ID\ number\ of\ this\ component.\n\n\ @return\ The\ ID\ number\ for\ this\ component.\n
comment8.params=b
comment8.target=void\ setEnabled(boolean)
comment8.text=\n\ Enables\ or\ disables\ the\ component,\ depending\ on\ the\ value\ of\ the\n\ parameter\ <code>b</code>.\n\n\ An\ enabled\ component\ can\ respond\ to\ user\ input\ and\ generate\ events.\n\ Components\ are\ enabled\ initially\ by\ default.\n\n\ @param\ b\ Set\ true\ to\ enable\ the\ component,\ otherwise\ false.\n
comment9.params=img
comment9.target=void\ makeDisabledImage(greenfoot.GreenfootImage)
comment9.text=\n\ Converts\ an\ image\ to\ a\ "disabled"\ version.\n\n\ @param\ img\ The\ image\ to\ "disable".\n
numComments=43
